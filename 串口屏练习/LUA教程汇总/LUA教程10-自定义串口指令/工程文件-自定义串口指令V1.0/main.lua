
--[[******************************Copyright(c)*********************************
** GUANGZHOU DCOLOUR TECHNOLOGY CO.,LTD
** 广州大彩光电科技有限公司
** http://www.gz-dc.com/
**
**LUA学习网站：www.runoob.com/lua
**------File Info-----------------------------------------------------------
** File Name:              LUA教程-自定义串口指令
** Latest modified Date:   2019.02.22
** Latest Version:         V1.0
** Description:            使用自定义的串口指令操作控件
**
**--------------------------------------------------------------------------
** Created By:             林绍佳
** Created date:           2019.02.22
** Version:                V1.0
** Descriptions:           使用自定义的串口指令操作控件
**
**--------------------------------------------------------------------------
** Modified by:            修改人的姓名
** Modified date:          文件的修改日期（YYYY-MM-DD）
** Version:                文件修订的版本号
** Description:            文件修订的简要描述
**
***************************************************************************--]]

--[[***************************************************************************
系统函数
** Function name:          on_init()
** Descriptions:           初始化函数
***************************************************************************--]]
function on_init()
	
	--[[**********************
	--功能：      设置串口接收超时间
	--调用函数1： uart_set_timeout(timeout,timeeout_inter)
	--函数功能：  设置串口接收超时间
	--参数：      timeout         接受总超时，单位：毫米
	--            timeeout_inter  字节间隔超时，单位：毫米
	--********************--]]
	uart_set_timeout(1000,200)
end

--设置全局变量uart_free_protocol，使用自由串口协议
uart_free_protocol=1
--[[***************************************************************************
系统函数
** Function name:          on_uart_recv_data
** Descriptions:           串口自定义函数
** input parameters:       packet  
***************************************************************************--]]
function on_uart_recv_data(packet)

	--[[**********************	
	--自定义指令
	--使用自定义指令来设置按钮、文本、蜂鸣器
	--方法如下：
	--显示图片命令格式(16进制)：A1 A B 1A
	--帧头：A1
	--帧尾：1A
	--A：01-按钮;  02-文本;  03-蜂鸣器;
	--B：A为1时，表示按钮状态;
	--   A为2时，表示文本内容;
	--   A为3时，表示蜂鸣器响的时长;
	--例1：A1 01 01 1A
	--     表示设置按钮1按下
	--例2：A1 02 05 1A
	--     表示设置文本2的内容为05
	--********************--]]

	if packet[0]==0xA1               --帧头为0xA1
	then
		
		--[[**********************
		--功能：      控制按钮状态
		--调用函数1： set_value(screen,control,value)
		--函数功能：  设置控件数值
		--参数：      screen：  控件的页码
        --            control： 控件的编号
        --            value：   控件被修改后的值
		--********************--]]
		if packet[1]==0x01            --第二个字节对应按钮指令
		then
			if packet[2]==0x01        --第三个字节对应按钮按下的状态
			then
				set_value(0,1,1)
			else                      --第三个字节对应按钮弹起的状态
				set_value(0,1,0)
			end
		end

		--[[**********************
		--功能：      设置文本
		--调用函数1： set_text(screen,control,text)
		--函数功能：  设置控件显示内容(字符串)
		--参数：      screen：  被触发控件的页码
		--            control： 控件的编号
		--            text：    字符串
		--********************--]]
		if packet[1]==0x02           --第二个字节对应文本指令
		then
			set_text(0,2,packet[2])  --设置文本为第三个字节
		end

		--[[**********************
		--功能：      设置蜂鸣器响
		--调用函数1： beep(time)
		--函数功能：  设置蜂鸣器响
		--参数：      time：  响的时长，单位：毫秒
		--********************--]]
		if packet[1]==0x03          --第三个字节对应文本指令
		then
			beep(packet[2])         --设置蜂鸣器响，单位：毫米
		end
	end
end


--设置按钮按下时发送的指令：A1 04 01 1A
local send_table1={04,01,26}
send_table1[0]=161

--创建表，用于存储键盘输入完成后发送的指令
local send_table2={}


--创建字符串
local send_text2

--[[***************************************************************************
系统函数
** Function name:          on_control_notify
** Descriptions:           用户通过触摸修改控件后，执行此回调函数。
**                         点击按钮控件，修改文本控件、修改滑动条都会触发此事件。
** input parameters:       screen：  控件的页码
**                         control： 控件的编号
**                         value：   控件被修改后的值
***************************************************************************--]]
function on_control_notify(screen,control,value)

	--[[**********************
	--功能：      按下按钮时，通过串口发送指令
	--调用函数1： uart_send_data(packet)
	--函数功能：  通过串口发送数据
	--参数：      packet 数据，类型：表
	--********************--]]
	if screen==0 and control==4 and value==1
	then
		uart_send_data(send_table1)           --发送指令
	end

	--[[**********************
	--功能：      发送键盘输入的内容
	--调用函数1： uart_send_data(packet)
	--函数功能：  通过串口发送数据
	--参数：      packet    数据，类型：表
	--调用函数2： get_text(screen,control)
	--函数功能：  获取控件字符串内容(字符串)
	--参数：      screen：  被触发控件的页码
    --            control： 控件的编号
	--返回：      字符串
	--调用函数3： string.len(arg)
	--函数功能：  计算字符串长度
	--参数：      arg：     字符串
	--返回：      整数值
	--调用函数4： string.byte(arg[,int])
	--函数功能：  转换字符为整数值(可以指定某个字符，默认第一个字符)
	--参数：      arg：     字符串
    --            [,int]：  索引
	--返回：      整数值
	--********************--]]
	if screen==0 and control==5
	then
		send_table2={}                                 --表初始化
		send_table2[0]=161                             --设置指令头，0xA1
		send_table2[1]=0x05                            --设置键盘指令
		send_text2=get_text(0,5)                       --获取文本的内容
		for i=1,string.len(send_text2) do              --把字符串转为表
			send_table2[i+1]=string.byte(send_text2,i)
		end
		send_table2[string.len(send_text2)+2]=26       --设置指令未，0x1A
		uart_send_data(send_table2)                    --发送指令
	end
	
end
--[[***************************************************************************
END FILE
***************************************************************************--]]
